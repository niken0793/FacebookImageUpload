

        /*private async void btngetAlbumlist_Click(object sender, EventArgs e)
        {
            btngetAlbumlist.Enabled = false;
            pbStatus.Maximum = 100;
            pbStatus.Step = 1;
            //List<string> inboxAlbums = new List<string> { "1661869480692559", "1658361464376694", "1661205730758934" };
            //List<string> inboxAlbums = null;
            List<string> inboxAlbums = outbox;
            this.ListViewalbumList.Items.Clear();
            try
            {
                var progress = new Progress<int>(s => { pbStatus.Value = s; lbStatusBar.Text = s.ToString(); });
                await Task.Factory.StartNew(() => GetAlbumList_Outbox(progress, inboxAlbums, 5), TaskCreationOptions.LongRunning);

                this.ListViewalbumList.View = View.LargeIcon;
                this.ListViewalbumList.LargeImageList = FB_Image.Album_PhotoList;

                for (int j = 0; j < FB_Image.Album_PhotoList.Images.Count; j++)
                {
                    ListViewItem item = new ListViewItem();
                    item.Name = FB_Image.List_AlbumID[j];
                    item.Text = FB_Image.Album_PhotoList.Images.Keys[j].ToString();
                    item.ImageIndex = j;
                    this.ListViewalbumList.Items.Add(item);
                }
                string path = Path.Combine(FB_Image.RelativeDirectory, FB_Image.AlbumDirectory);
                Common.SerializeObject(FB_Image.List_AlbumInfo, path);



            }
            catch (Exception ex)
            {
                Log(ex);
            }
            btngetAlbumlist.Enabled = true;
        }*/


		        /*private void ListViewalbumList_ItemActivate(object sender, EventArgs e)
        {
            DialogResult dlg = MessageBox.Show("Do you want to choose this Album for upload?", "Choose Album", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (dlg == DialogResult.Yes)
            {
                ListViewItem item = ((ListView)sender).SelectedItems[0];
                pBoxAlbumCover.Image = (Image)item.ImageList.Images[item.ImageIndex];
                lbAlbumName.Text = item.Text.ToString();
                tbAlbumID.Text = item.Name.ToString();
            }
        }*/


		       /* private async void btnGetAlbumInbox_Click(object sender, EventArgs e)
        {
            btnGetAlbumInbox.Enabled = false;
            pbStatus.Maximum = 100;
            pbStatus.Step = 1;
            //List<string> inboxAlbums = new List<string> { "1661869480692559", "1658361464376694", "1661205730758934" };
            //List<string> inboxAlbums = null;
            List<string> inboxAlbums = inbox;
            this.ListViewalbumList_In.Items.Clear();
            try
            {
                var progress = new Progress<int>(s => { pbStatus.Value = s; lbStatusBar.Text = s.ToString(); });
                await Task.Factory.StartNew(() => GetAlbumList_1(progress, inboxAlbums, 5), TaskCreationOptions.LongRunning);

                this.ListViewalbumList_In.View = View.LargeIcon;
                this.ListViewalbumList_In.LargeImageList = FB_Image.Album_PhotoList_In;

                for (int j = 0; j < FB_Image.Album_PhotoList_In.Images.Count; j++)
                {
                    ListViewItem item = new ListViewItem();
                    item.Name = FB_Image.List_AlbumID_In[j];
                    item.Text = GetInboxText(FB_Image.Album_PhotoList_In.Images.Keys[j].ToString(), FB_Image.List_AlbumInfo_In[j].NewNumber);
                    item.ImageIndex = j;
                    this.ListViewalbumList_In.Items.Add(item);
                }
                string path = Path.Combine(FB_Image.RelativeDirectory, FB_Image.AlbumDirectory_In);
                Common.SerializeObject(FB_Image.List_AlbumInfo_In, path);



            }
            catch (Exception ex)
            {
                Log(ex);
            }
            btnGetAlbumInbox.Enabled = true;

        }*/


		        /*private async void btnGetMessage_Click(object sender, EventArgs e)
        {

            var a = ListViewalbumList_In.SelectedItems;
            if (a.Count > 0)
            {

                foreach (ListViewItem i in a)
                {
                    string albumID = i.Name;
                    string text = i.Text;
                    if (text.IndexOf('-') > 0)
                        text = text.Substring(0, text.IndexOf('-'));
                    List<FB_Message> listMessage = null;
                    var progress = new Progress<string>(s => { });
                    await Task.Factory.StartNew(() => { listMessage = GetNewMessageFromAlbum(progress, albumID); }, TaskCreationOptions.LongRunning);
                    if (listMessage == null)
                    {
                        tbInbox.AppendText("No ouput" + Environment.NewLine);
                        return;
                    }
                    foreach (FB_Message m in listMessage)
                    {
                        if (m.Content != "")
                        {
                            tbInbox.AppendText("Output of " + m.Image.FileName + " : " + Environment.NewLine);
                            tbInbox.AppendText(m.Content + Environment.NewLine);
                        }
                        else
                        {
                            tbInbox.AppendText("Output of " + m.Image.FileName + " : " + Environment.NewLine);
                            tbInbox.AppendText("No ouput" + Environment.NewLine);
                        }

                    }

                    i.Text = text;
                }

                MessageBox.Show("get message is finished");
            }
        }*/

		        private async void btnGetImageTagged_Click(object sender, EventArgs e)
        {
            btnGetImageTagged.Enabled = false;
            pbStatus.Maximum = 100;
            pbStatus.Step = 1;
            List<string> inboxImage = inbox;
            try
            {
                var progress = new Progress<int>(s => { pbStatus.Value = s; lbStatusBar.Text = s.ToString(); });
                await Task.Factory.StartNew(() => GetImageTagged1(progress, ListInboxUser), TaskCreationOptions.LongRunning);

                if (ListInboxUser.Count > 0)
                {
                    foreach (InboxUser i in ListInboxUser)
                    {
                        if (i.Messages.Count > 0)
                        {
                            foreach (FB_Message m in i.Messages)
                            {
                                tbInbox.AppendText("Message: " + m.Content + Environment.NewLine);
                                tbInbox.AppendText("Sender: " + i.UserName + Environment.NewLine);
                            }
                        }
                    }
                }
                SaveActiveUserOnDisk(ActiveUser);


            }
            catch (Exception ex)
            {
                Log(ex);
            }
            btnGetImageTagged.Enabled = true;
        }
        private async void btnGetImageMessage_Click(object sender, EventArgs e)
        {
            var a = listViewTagImage.SelectedItems;
            if (a.Count > 0)
            {

                foreach (ListViewItem i in a)
                {
                    List<FB_Message> listMessage = null;
                    var progress = new Progress<string>(s => { });
                    await Task.Factory.StartNew(() => { listMessage = GetNewMessageFromImage(progress, i.Text); }, TaskCreationOptions.LongRunning);
                    if (listMessage == null)
                    {
                        tbInbox.AppendText("No ouput" + Environment.NewLine);
                        return;
                    }
                    foreach (FB_Message m in listMessage)
                    {
                        if (m.Content != "")
                        {
                            tbInbox.AppendText("Output of " + m.Image.FileName + " : " + Environment.NewLine);
                            tbInbox.AppendText(m.Content + Environment.NewLine);
                        }
                        else
                        {
                            tbInbox.AppendText("Output of " + m.Image.FileName + " : " + Environment.NewLine);
                            tbInbox.AppendText("No ouput" + Environment.NewLine);
                        }

                    }

                }

                MessageBox.Show("get message is finished");
            }
        }

		        //void coverImageForm_FormClosed(object sender, FormClosedEventArgs e)
        //{
        //    if (!string.IsNullOrEmpty(coverImageForm.imageLink))
        //    {
        //        tbImagePath.Text = coverImageForm.imageLink;
        //        pbImage.ImageLocation = coverImageForm.imageLink;
        //        lbImageName.Text = Path.GetFileName(coverImageForm.imageLink);
        //        lbImageDirectory.Text = Path.GetDirectoryName(coverImageForm.imageLink);
        //        lbImageSize.Text = Common.BytesToString(new FileInfo(coverImageForm.imageLink).Length);
        //    }

        //}

		        private List<FB_Message> GetNewMessageFromImage(IProgress<string> progress,string imageID)
        {
            List<FB_Message> ListMessages = new List<FB_Message>();
            FB_Message message = new FB_Message();
            FB_Image messageImage = new FB_Image();
            messageImage.FileName = imageID + ".jpg";
            messageImage.Directory = FB_Image.BaseDirectory + imageID + ".jpg";
            messageImage.ImageID = imageID;

            message.Image = messageImage;
            if (message.Image.FileName != "")
            {
                string output = JPSeekDecode(message.Image.FileName, Path.GetFileNameWithoutExtension(message.Image.FileName) + ".txt");
                if (output != null && output != "")
                {
                    // check CRC
                    message.Content = File.ReadAllText(Path.Combine(FB_Image.BaseDirectory, output));
                }

            }
            ListMessages.Add(message);

            return ListMessages;

        }

		        public void GetImageTagged(IProgress<int> progress)
        {
            try
            {
                //string created = "1449376455";
                var fb = new FacebookClient(ActiveUser.AccessToken);
                dynamic res = fb.Get("me/photos?fields=from");
                string json_string = Newtonsoft.Json.JsonConvert.SerializeObject(res);
                var json = JObject.Parse(json_string);
                dynamic photos = json["data"];
                int count = photos.Count;
                string source_url = "";
                string json_string_image = "";
                string imagePath = "";
                List<string> imagesId = new List<string>(); 
                int i = 0;
                ImageList successImage = new ImageList();

                while (i < count && photos[i] != null)
                {
                    if ((string)photos[i]["from"]["id"] == lbUserIdComm.Text)
                    {
                        string imageId = (string)photos[i]["id"];
                        dynamic images = fb.Get(imageId+"?fields=images");
                        json_string_image = Newtonsoft.Json.JsonConvert.SerializeObject(images);
                        var json_image = JObject.Parse(json_string_image);

                        source_url = (string)json_image["images"][0]["source"];

                        using (WebClient webClient = new WebClient())
                        {
                            byte[] data = webClient.DownloadData(source_url);

                            using (MemoryStream mem = new MemoryStream(data))
                            {
                                using (var yourImage = Image.FromStream(mem))
                                {
                                    imagePath = FB_Image.BaseDirectory + imageId + ".jpg";
                                    yourImage.Save(imagePath, ImageFormat.Jpeg);
                                }
                            }
                        }
                        successImage.Images.Add(Image.FromFile(imagePath));
                        successImage.Images.SetKeyName(i, imageId);
                        imagesId.Add(imageId);
                    }
                    break;
                }

                FB_Image.Image_Tags_In = successImage;
                FB_Image.Image_TagsID_In = imagesId;
            }
            catch (Exception ex)
            {
                Log(ex);
            }
        }

		        public void GetAlbumList_1(IProgress<int> progress, List<string> inboxAlbums = null, int limit = 5)
        {
            try
            {

                var fb = new FacebookClient(ActiveUser.AccessToken);
                dynamic albums = fb.Get("me/albums?fields=count,created_time,updated_time,name,cover_photo,picture&limit=10&date_format=U"); // Get album information
                string json_string = JsonConvert.SerializeObject(albums); // parse response sang json
                var json = JObject.Parse(json_string);
                int i = 0;
                ImageList photoList = new ImageList(); // ImageList
                photoList.TransparentColor = Color.Blue;
                photoList.ColorDepth = ColorDepth.Depth32Bit;
                photoList.ImageSize = new Size(50, 50);
                dynamic a_albums = json["data"];
                int count = a_albums.Count;
                List<string> list_albumID = new List<string>();

                foreach (var obj in json["data"])
                {
                    string albumName = (string)obj["name"];
                    string albumID = (string )obj["id"];
                    string createdTime = (string)obj["created_time"];
                    string updatedTime = (string)obj["updated_time"];
                    createdTime= createdTime.TrimEnd(')');
                    updatedTime= updatedTime.TrimEnd(')');
                    
                    string img_url ="";
                    if (inboxAlbums != null)        // chỉ kiểm tra các album đã quy định trước
                    {
                        var match = inboxAlbums.Where(x => x.Equals(albumID));
                        if (match.Count()==0)
                            continue;
                    }

                    var match1 = FB_Image.List_AlbumInfo_In.Where(x => x.Id.Equals(albumID)); // album đã có thông tin hay chưa
                    AlbumInfo info = null;
                    if (match1.Count() == 1)
                    {
                        info = match1.First();
                    }
             
                    /* download ảnh */
                    using (WebClient webClient = new WebClient())
                    {
                        byte[] data = webClient.DownloadData((string)obj["picture"]["data"]["url"]);

                        using (MemoryStream mem = new MemoryStream(data))
                        {
                            using (var yourImage = Image.FromStream(mem))
                            {
                                img_url = FB_Image.BaseDirectory + obj["id"].ToString()+(r.Next()).ToString() + ".jpg";
                                yourImage.Save(img_url, ImageFormat.Jpeg);
                               
                                photoList.Images.Add(Image.FromFile(img_url));
                                photoList.Images.SetKeyName(i, albumName);
                            }
                        }

                    }


                    // Xử lý thông tin albums
                    if (info == null)
                    {
                        FB_Image.List_AlbumInfo_In.Add(
                            new AlbumInfo(
                                obj["id"].ToString(),
                                albumName,
                                img_url,
                                Int32.Parse(obj["count"].ToString()),
                                long.Parse(createdTime),
                                long.Parse(updatedTime),
                                Int32.Parse(obj["count"].ToString())
                                ));
                    }
                    else
                    {
                        int newCount = Int32.Parse(obj["count"].ToString());
                        if (info.Count < newCount)
                        {                          
                            info.NewNupdatedTime = long.Parse(updatedTime);
                            info.NewNumber = newCount - info.Count;
                            info.Count = newCount;
                        }
                        else
                        {
                            info.NewNupdatedTime = long.Parse(updatedTime);
                            info.NewNumber = 0;
                        }
                    }
                    list_albumID.Add(obj["id"].ToString());
                    progress.Report((i * 100 / count));
                    i++;


                }

                FB_Image.Album_PhotoList_In = photoList;
                FB_Image.List_AlbumID_In = list_albumID;

                progress.Report(100);
            }
            catch (Exception ex)
            {
                Log(ex);
            }
        }

        public void GetAlbumList_Outbox(IProgress<int> progress, List<string> listAlbums = null, int limit = 5)
        {
            try
            {

                var fb = new FacebookClient(ActiveUser.AccessToken);
                dynamic albums = fb.Get("me/albums?fields=count,created_time,updated_time,name,cover_photo,picture&limit=10&date_format=U)"); // Get album information
                string json_string = JsonConvert.SerializeObject(albums); // parse response sang json
                var json = JObject.Parse(json_string);
                int i = 0;
                ImageList photoList = new ImageList(); // ImageList
                photoList.TransparentColor = Color.Blue;
                photoList.ColorDepth = ColorDepth.Depth32Bit;
                photoList.ImageSize = new Size(50, 50);
                dynamic a_albums = json["data"];
                int count = a_albums.Count;
                List<string> list_albumID = new List<string>();
                FB_Image.List_AlbumInfo = new List<AlbumInfo>();

                foreach (var obj in json["data"])
                {
                    string albumName = (string)obj["name"];
                    string albumID = (string)obj["id"];
                    if (listAlbums != null)        // chỉ kiểm tra các album đã quy định trước
                    {
                        var match = listAlbums.Where(x => x.Equals(albumID));
                        if (match.Count() == 0)
                            continue;
                    }
                    string img_url = "";

                    /* download ảnh */
                    using (WebClient webClient = new WebClient())
                    {
                        byte[] data = webClient.DownloadData((string)obj["picture"]["data"]["url"]);

                        using (MemoryStream mem = new MemoryStream(data))
                        {
                            using (var yourImage = Image.FromStream(mem))
                            {
                                img_url = FB_Image.BaseDirectory + obj["id"].ToString()+(r.Next()).ToString() + ".jpg";
                                yourImage.Save(img_url, ImageFormat.Jpeg);
                                
                                photoList.Images.Add(Image.FromFile(img_url));
                                photoList.Images.SetKeyName(i, albumName);
                            }
                        }

                    }


                    // Xử lý thông tin albums
                        FB_Image.List_AlbumInfo.Add(
                            new AlbumInfo(
                                obj["id"].ToString(),
                                albumName,
                                img_url
                                ));
                        list_albumID.Add(obj["id"].ToString());
                    progress.Report((i * 100 / count));
                    i++;
                }

                FB_Image.Album_PhotoList = photoList;
                FB_Image.List_AlbumID = list_albumID;

                progress.Report(100);
            }
            catch (Exception ex)
            {
                Log(ex);
            }
        }

        private List<FB_Message> GetNewMessageFromAlbum(IProgress<string> progress,string albumID)
        {
            AlbumInfo album = Common.GetAlbumInfoByID(FB_Image.List_AlbumInfo_In, albumID);
            if (album.NewNumber > 0)
            {
                string limit = "&limit=" + album.NewNumber;
                string since = "&since=" + album.UpdatedTime;
                string dateFormat = "&date_format=U";
                List<FB_Message> ListMessages = new List<FB_Message>();

                if (progress != null)
                    progress.Report("15|15|Getting inbox information");
                var fb = new FacebookClient(ActiveUser.AccessToken);
                dynamic albums = fb.Get(albumID+"/photos?pretty=1"+limit+since+dateFormat); // Get album information
                string json_string = JsonConvert.SerializeObject(albums); // parse response sang json
                var json = JObject.Parse(json_string);
                dynamic photos = json["data"];
                int count = photos.Count;
                int p = 70 / count;
                int i = 1;
                if (progress != null)
                    progress.Report("30|30|Getting messages");
                if (count > 0)
                {
                    foreach (var obj in photos)
                    {

                        FB_Message message = new FB_Message();
                        FB_Image messageImage = new FB_Image();
                        dynamic images = obj["images"];
                        int images_count = images.Count;
                        if (images_count > 0)
                        {
                            if (progress != null)
                                progress.Report((i*p).ToString()+"|"+(i*p).ToString()+"|Getting messages");
                            i++;
                            foreach (var m in obj["images"])
                            {
                                if (((string)m["width"]).Equals("960"))
                                {
                                    string img_path;

                                    /* download ảnh */
                                    using (WebClient webClient = new WebClient())
                                    {
                                        byte[] data = webClient.DownloadData((string)m["source"]);

                                        using (MemoryStream mem = new MemoryStream(data))
                                        {
                                            using (var yourImage = Image.FromStream(mem))
                                            {
                                                img_path = FB_Image.BaseDirectory + obj["id"].ToString() + ".jpg";
                                                yourImage.Save(img_path, ImageFormat.Jpeg);
                                                messageImage.FileName = Path.GetFileName(img_path);
                                                messageImage.Directory = Path.GetDirectoryName(img_path);
                                                messageImage.ImageID = obj["id"].ToString();
                                                break;

                                            }
                                        }

                                    }
                                }
                            }

                        }

                        message.Image = messageImage;
                        if (message.Image.FileName != "")
                        {
                            string output = JPSeekDecode(message.Image.FileName, Path.GetFileNameWithoutExtension(message.Image.FileName) + ".txt");
                            if (output != null && output != "")
                            {
                                // check CRC
                                message.Content = File.ReadAllText(Path.Combine(FB_Image.BaseDirectory,output));
                            }
                            
                        }
                        ListMessages.Add(message);
                    }
                    if (progress != null)
                        progress.Report("100|100|Finish");
                    album.UpdatedTime = album.NewNupdatedTime;
                    album.NewNumber = 0;
                    return ListMessages;

                }
                else
                {
                    return null;
                }
            }
            else
            {
                return null;
            }

        }

        /*public void LoadingAlbumList()
        {
            string filename = Path.Combine(FB_Image.RelativeDirectory,FB_Image.AlbumDirectory);
            FB_Image.List_AlbumInfo = Common.DeSerializeObject<List<AlbumInfo>>(filename);
            if (FB_Image.List_AlbumInfo != null && FB_Image.List_AlbumInfo.Count > 0)
            {
                FB_Image.List_AlbumID = new List<string>();
                FB_Image.Album_PhotoList = new ImageList();
                FB_Image.Album_PhotoList.TransparentColor = Color.Blue;
                FB_Image.Album_PhotoList.ColorDepth = ColorDepth.Depth32Bit;
                FB_Image.Album_PhotoList.ImageSize = new Size(50, 50);
                for (int i = 0; i < FB_Image.List_AlbumInfo.Count; i++)
                {
                    AlbumInfo e = FB_Image.List_AlbumInfo[i];
                    FB_Image.List_AlbumID.Add(e.Id);
                    if(File.Exists(e.Path))
                        FB_Image.Album_PhotoList.Images.Add(Image.FromFile(e.Path));
                    else
                        FB_Image.Album_PhotoList.Images.Add(Image.FromFile(FB_Image.DefaultImage));
                    FB_Image.Album_PhotoList.Images.SetKeyName(i, e.Name);

                }
                this.ListViewalbumList.View = View.LargeIcon;
                this.ListViewalbumList.LargeImageList = FB_Image.Album_PhotoList;

                for (int j = 0; j < FB_Image.Album_PhotoList.Images.Count; j++)
                {
                    ListViewItem item = new ListViewItem();
                    item.Text = FB_Image.Album_PhotoList.Images.Keys[j].ToString();
                    item.Name = FB_Image.List_AlbumID[j];
                    item.ImageIndex = j;
                    this.ListViewalbumList.Items.Add(item);
                }



            }
            else
            {
                FB_Image.List_AlbumInfo = new List<AlbumInfo>();
            }

        }*/

        /*public void LoadingAlbumList_In()
        {
            string filename = Path.Combine(FB_Image.RelativeDirectory, FB_Image.AlbumDirectory_In);
            FB_Image.List_AlbumInfo_In = Common.DeSerializeObject<List<AlbumInfo>>(filename);
            if (FB_Image.List_AlbumInfo_In != null && FB_Image.List_AlbumInfo_In.Count > 0)
            {
                FB_Image.List_AlbumID_In = new List<string>();
                FB_Image.Album_PhotoList_In = new ImageList();
                FB_Image.Album_PhotoList_In.TransparentColor = Color.Blue;
                FB_Image.Album_PhotoList_In.ColorDepth = ColorDepth.Depth32Bit;
                FB_Image.Album_PhotoList_In.ImageSize = new Size(50, 50);
                for (int i = 0; i < FB_Image.List_AlbumInfo_In.Count; i++)
                {
                    AlbumInfo e = FB_Image.List_AlbumInfo_In[i];
                    FB_Image.List_AlbumID_In.Add(e.Id);
                    if (File.Exists(e.Path))
                        FB_Image.Album_PhotoList_In.Images.Add(Image.FromFile(e.Path));
                    else
                        FB_Image.Album_PhotoList_In.Images.Add(Image.FromFile(FB_Image.DefaultImage));
                    FB_Image.Album_PhotoList_In.Images.SetKeyName(i, e.Name);

                }
                this.ListViewalbumList_In.View = View.LargeIcon;
                this.ListViewalbumList_In.LargeImageList = FB_Image.Album_PhotoList_In;

                for (int j = 0; j < FB_Image.Album_PhotoList_In.Images.Count; j++)
                {
                    ListViewItem item = new ListViewItem();
                    item.Text = FB_Image.Album_PhotoList_In.Images.Keys[j].ToString();
                    item.Name = FB_Image.List_AlbumID_In[j];
                    item.ImageIndex = j;
                    this.ListViewalbumList_In.Items.Add(item);
                }



            }
            else
            {
                FB_Image.List_AlbumInfo_In = new List<AlbumInfo>();
            }

        }*/